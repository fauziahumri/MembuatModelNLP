# -*- coding: utf-8 -*-
"""Membuat Model NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yaWJs-9UgelsCrF-4QuY_yf2hRyPFPHg
"""

import tensorflow as tf
import pandas as pd
import os
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense
df = pd.read_csv('indonesian-names.csv')

df.head()

category = pd.get_dummies(df.gender)
df_baru = pd.concat([df, category], axis=1)
df_baru = df_baru.drop(columns='gender')
df_baru

name = df_baru['name'].values
label = df_baru[['f', 'm']].values

# pembagian untuk train dam data testing
from sklearn.model_selection import train_test_split
name_latih, name_test, label_latih, label_test = train_test_split(name, label, test_size=0.2)

# tokenisasi
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

tokenizer = Tokenizer(num_words=1000, oov_token='x')
tokenizer.fit_on_texts(name_latih) 
tokenizer.fit_on_texts(name_test)
 
sekuens_latih = tokenizer.texts_to_sequences(name_latih)
sekuens_test = tokenizer.texts_to_sequences(name_test)
 
padded_latih = pad_sequences(sekuens_latih) 
padded_test = pad_sequences(sekuens_test)

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(2, activation='softmax')
])

model.summary()

history = model.compile(optimizer='Adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.9):
      print("\n Accuracy telah mencapai >90%!")
      self.model.stop_training = True
callbacks = myCallback()

history = model.fit(padded_latih, label_latih, epochs=50, 
                   validation_data=(padded_test, label_test), verbose=2, callbacks=[callbacks])

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.title('Accuracy dan Validation Model')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='lower right')
plt.show

plt.plot(history.history['loss'])
plt.title('Loss Model')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='upper right')
plt.show